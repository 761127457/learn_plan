开发者安全测试：掌握DT-Fuzz测试结果评估能力、了解DT-Fuzz基本原理、掌握DT-Fuzz用例设计，编写和执行能力。
现代软件工程：掌握高级软件工程方法（软件复用、CBSE、分布式软件工程、面向服务的软件工程、系统工程、系统孩子系统、应用架构、形式规范Formal Specificati、面向方面的软件工程Aspect-oriented-Software Engineering）、掌握新型研发模式与方法（CD、DevOps、TVI/VPL、JAD、CED、内源精益看板、精创等）
测试开发与执行：了解框架的基础功能、掌握主流测试框架（DTCenter、GTest、CPPUnit、JUnit、Mockito、PowerMock）的基本使用方法、参数化测试代码写作方法；能熟练应用服务流水线工具链；




https://wenku.baidu.com/view/bddf30d326fff705cc170afa.html


一般要求级别：
客观题：
1、编程语言知识与应用――熟练掌握，灵活应用
2、通用规范理解与应用――熟练掌握，灵活应用
3、安全规范理解与应用――熟练掌握，灵活应用
4、代码坏味道识别――一般性了解
――――――
1、配置管理基础能力――一般性了解
2、安全可信基础――一般性了解
3、开源及第三方组件使用能力――熟练掌握
4、现代软件工程――一般性了解
5、调试与定位能力――熟练掌握，灵活应用
6、开发者测试――熟练掌握，灵活应用
7、通用基础算法及数据结构――熟练掌握，灵活应用
编程题：
1、考察综合能力――熟练掌握语言特性，并结合应用场景与要求，实现题目对应功能


资深要求级别：
客观题：
1、编程语言知识与应用――熟练掌握，灵活应用
2、通用规范理解与应用――熟练掌握，灵活应用
3、安全规范理解与应用――熟练掌握，灵活应用
――――――
1、可信设计――熟练掌握，灵活应用
2、需求分析――熟练掌握，灵活应用
3、软件建模和设计模式应用――熟练掌握，灵活应用
4、重构分析――熟练掌握，灵活应用
5、开发者测试――熟练掌握，灵活应用
――――――
1、配置管理基础能力――一般性了解
2、安全可信基础――熟练掌握，灵活应用
3、开源及第三方组件使用能力――熟练掌握
4、现代软件工程――一般性了解
5、调试与定位能力――熟练掌握，灵活应用
6、编译构建知识与应用――熟练掌握
7、通用基础算法及数据结构――熟练掌握，灵活应用
编程题：
1、考察综合能力――熟练掌握语言特性，并结合应用场景与要求，灵活应用相应算法，实现题目对应功能




编程语言知识与应用
一般要求：
1）、c++基础知识，如：变量、整数数据类型、字符、字符串、基本输入输出等；
2）、控制语句以及更多的数据类型知识，如：循环/条件/分支语句、浮点类型、整数的算术运算操作等；
3）、函数基本知识，如：函数的声明和定义、函数调用、函数副作用、函数参数传递、缺省参数、inline函数、函数重载等；
4）、基础面向对象知识，如：类、访问控制、对象、类的构造函数/析构函数、类的静态成员变量和函数、类和友元、操作符重载等；
5）、c++类继承相关知识，如：基类、派生类、多态机制、派生类中的构造/析构、抽象和抽象类；
6）、c++其他知识，如：命名空间、Name Mangling、new/delete重载、c++类型转换、简单的异常机制等；
7）、c++11新特性中的基础知识，如：auto类型推导、强类型枚举等；
8）、标准模板库的基础容器和算法，如：vector、list、友元、map、set、unordered_map等，了解并熟练使用；
资深要求：
1）、c++基础知识，如：变量、整数数据类型、字符、字符串、基本输入输出等；
2）、控制语句以及更多的数据类型知识，如：循环/条件/分支语句、浮点类型、整数的算术运算操作等；
3）、函数基本知识，如：函数的声明和定义、函数调用、函数副作用、函数参数传递、缺省参数、inline函数、函数重载等；
4）、基础面向对象知识，如：类、访问控制、对象、类的构造函数/析构函数、类的静态成员变量和函数、类和友元、操作符重载等；
5）、c++类继承相关知识，如：基类、派生类、多态机制、派生类中的构造/析构、抽象和抽象类；
6）、c++其他知识，如：命名空间、Name Mangling、new/delete重载、c++类型转换、简单的异常机制等；
7）、现代c++语言特性（c++11）：auto变量、移动语义和右值引用、lambda函数、新的类特性、Memory模型、智能指针、STL容器和算法增强；
8）、并发编程模型和多线程程序实现；
9）、STL标准模板库的基础容器和算法，如：vector、list、dequeue、map、set、unordered_map等，清楚不同容器的实现原理，时间复杂度/空间复杂度
10）、了解Linux/Windows（根据工作的实际OS）系统的多核并发（多线程、锁、信号量、免锁数据结构、并行化等应用）编程技能、性能分析、性能调优、CPU架构以及汇编语言的理解等


代码坏味道识别
一般要求：
1）、重构原则：重构概念、单一职责原则、里式替换原则、迪米特法则、开闭原则、依赖倒置原则、接口隔离原则；
2）、掌握模块内代码的坏味道识别与修改方法，包括数据的坏味道、函数的坏味道、注释的坏味道。


配置管理基础能力
一般要求：
1）、配置管理的本质、目标、与网络安全和可信的关系、基础流程规则，及工具的应用


安全可信基础
一般要求：
1）、理解可信中安全、隐私、韧性、可用性和可靠性的基本概念，熟悉常见软件攻击手段和规避措施，熟悉常见消减风险的方法、工具等


开源及第三方组件使用能力
一般要求：
1）、开源软件认知、使用、生命周期、义务履行等


现代软件工程
一般要求：
1）、掌握软件开发相关的过程活动及方法，包含需求分析、架构设计、软件设计、开发、测试、项目管理等
2）、掌握典型的现代软件工程方法、实践及应用，包含敏捷、DevOps、产品线工程（PLE）等


调试与定位能力
一般要求：
1）、掌握Debugger（一GDB为例）的基本设置与常用命令。包含单步执行，跳入函数，跳出函数，设置断点，设置观察点，查看变量，查看调用栈等


开发者测试
测试设计（含理念、方法、用例设计）
一般要求：
1）、测试基础理论与设计方法，包含单元测试、集成测试、系统测试

测试实现与执行
一般要求：
1）、掌握白盒测试的框架应用及执行过程
2）、MOCK概念与使用方法（C/C++）
3）、测试用例与环境解耦的方法（可独立执行，不依赖于外部条件）
4）、覆盖率的分类（函数、代码行、分值覆盖率）

开发者安全测试
一般要求：
1）、理解DT-Fuzz基本原理、掌握Fuzz用例设计，编写和执行，熟悉相关工具的使用。

通用基础算法及数据结构
一般要求：
1）、基本数据结构，数组、字符串、队列、堆、栈、链表、哈希表
2）、常用基础算法，常用排序算法、搜索算法（深搜、广搜等）、递归、分治、最优化算法



可信设计
一般要求：
无
资深要求：
1）、掌握常见软件设计中各个领域






























